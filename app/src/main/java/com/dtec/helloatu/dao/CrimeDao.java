package com.dtec.helloatu.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dtec.helloatu.dao.Crime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRIME".
*/
public class CrimeDao extends AbstractDao<Crime, Long> {

    public static final String TABLENAME = "CRIME";

    /**
     * Properties of entity Crime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CrimPosition = new Property(1, int.class, "crimPosition", false, "CRIM_POSITION");
        public final static Property CrimeInfo = new Property(2, String.class, "crimeInfo", false, "CRIME_INFO");
        public final static Property InformerName = new Property(3, String.class, "informerName", false, "INFORMER_NAME");
        public final static Property InformerPhone = new Property(4, String.class, "informerPhone", false, "INFORMER_PHONE");
        public final static Property InformerAddress = new Property(5, String.class, "informerAddress", false, "INFORMER_ADDRESS");
        public final static Property InfoDocument = new Property(6, String.class, "infoDocument", false, "INFO_DOCUMENT");
        public final static Property InfoPicture = new Property(7, String.class, "infoPicture", false, "INFO_PICTURE");
        public final static Property InfoVideo = new Property(8, String.class, "infoVideo", false, "INFO_VIDEO");
        public final static Property InfoAudio = new Property(9, String.class, "infoAudio", false, "INFO_AUDIO");
        public final static Property Occurrence = new Property(10, int.class, "occurrence", false, "OCCURRENCE");
        public final static Property OccurrenceInformer = new Property(11, int.class, "occurrenceInformer", false, "OCCURRENCE_INFORMER");
        public final static Property Division = new Property(12, int.class, "division", false, "DIVISION");
        public final static Property DivisionInformer = new Property(13, int.class, "divisionInformer", false, "DIVISION_INFORMER");
        public final static Property District = new Property(14, int.class, "district", false, "DISTRICT");
        public final static Property DistrictInformer = new Property(15, int.class, "districtInformer", false, "DISTRICT_INFORMER");
        public final static Property CreatedAt = new Property(16, java.util.Date.class, "createdAt", false, "CREATED_AT");
    };


    public CrimeDao(DaoConfig config) {
        super(config);
    }
    
    public CrimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CRIM_POSITION\" INTEGER NOT NULL ," + // 1: crimPosition
                "\"CRIME_INFO\" TEXT NOT NULL ," + // 2: crimeInfo
                "\"INFORMER_NAME\" TEXT NOT NULL ," + // 3: informerName
                "\"INFORMER_PHONE\" TEXT NOT NULL ," + // 4: informerPhone
                "\"INFORMER_ADDRESS\" TEXT NOT NULL ," + // 5: informerAddress
                "\"INFO_DOCUMENT\" TEXT NOT NULL ," + // 6: infoDocument
                "\"INFO_PICTURE\" TEXT NOT NULL ," + // 7: infoPicture
                "\"INFO_VIDEO\" TEXT NOT NULL ," + // 8: infoVideo
                "\"INFO_AUDIO\" TEXT NOT NULL ," + // 9: infoAudio
                "\"OCCURRENCE\" INTEGER NOT NULL ," + // 10: occurrence
                "\"OCCURRENCE_INFORMER\" INTEGER NOT NULL ," + // 11: occurrenceInformer
                "\"DIVISION\" INTEGER NOT NULL ," + // 12: division
                "\"DIVISION_INFORMER\" INTEGER NOT NULL ," + // 13: divisionInformer
                "\"DISTRICT\" INTEGER NOT NULL ," + // 14: district
                "\"DISTRICT_INFORMER\" INTEGER NOT NULL ," + // 15: districtInformer
                "\"CREATED_AT\" INTEGER NOT NULL );"); // 16: createdAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRIME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Crime entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCrimPosition());
        stmt.bindString(3, entity.getCrimeInfo());
        stmt.bindString(4, entity.getInformerName());
        stmt.bindString(5, entity.getInformerPhone());
        stmt.bindString(6, entity.getInformerAddress());
        stmt.bindString(7, entity.getInfoDocument());
        stmt.bindString(8, entity.getInfoPicture());
        stmt.bindString(9, entity.getInfoVideo());
        stmt.bindString(10, entity.getInfoAudio());
        stmt.bindLong(11, entity.getOccurrence());
        stmt.bindLong(12, entity.getOccurrenceInformer());
        stmt.bindLong(13, entity.getDivision());
        stmt.bindLong(14, entity.getDivisionInformer());
        stmt.bindLong(15, entity.getDistrict());
        stmt.bindLong(16, entity.getDistrictInformer());
        stmt.bindLong(17, entity.getCreatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Crime readEntity(Cursor cursor, int offset) {
        Crime entity = new Crime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // crimPosition
            cursor.getString(offset + 2), // crimeInfo
            cursor.getString(offset + 3), // informerName
            cursor.getString(offset + 4), // informerPhone
            cursor.getString(offset + 5), // informerAddress
            cursor.getString(offset + 6), // infoDocument
            cursor.getString(offset + 7), // infoPicture
            cursor.getString(offset + 8), // infoVideo
            cursor.getString(offset + 9), // infoAudio
            cursor.getInt(offset + 10), // occurrence
            cursor.getInt(offset + 11), // occurrenceInformer
            cursor.getInt(offset + 12), // division
            cursor.getInt(offset + 13), // divisionInformer
            cursor.getInt(offset + 14), // district
            cursor.getInt(offset + 15), // districtInformer
            new java.util.Date(cursor.getLong(offset + 16)) // createdAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Crime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCrimPosition(cursor.getInt(offset + 1));
        entity.setCrimeInfo(cursor.getString(offset + 2));
        entity.setInformerName(cursor.getString(offset + 3));
        entity.setInformerPhone(cursor.getString(offset + 4));
        entity.setInformerAddress(cursor.getString(offset + 5));
        entity.setInfoDocument(cursor.getString(offset + 6));
        entity.setInfoPicture(cursor.getString(offset + 7));
        entity.setInfoVideo(cursor.getString(offset + 8));
        entity.setInfoAudio(cursor.getString(offset + 9));
        entity.setOccurrence(cursor.getInt(offset + 10));
        entity.setOccurrenceInformer(cursor.getInt(offset + 11));
        entity.setDivision(cursor.getInt(offset + 12));
        entity.setDivisionInformer(cursor.getInt(offset + 13));
        entity.setDistrict(cursor.getInt(offset + 14));
        entity.setDistrictInformer(cursor.getInt(offset + 15));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Crime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Crime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
